library(osmdata)
library(ggplot2)
#bb <- getbb ('paris fr', format_out = 'polygon')
bb <- getbb ('paris fr')
# construct topological network?
# smaller sample
bb[1,2]=2.24;bb[2,2]=48.83
roads <- opq(bbox = bb) %>% add_osm_feature(key = 'highway') %>% osmdata_sp ()
roads
# source: addTransportationLayer in CS_HOME/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R
source(paste0(Sys.getenv('CS_HOME'),"/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R"))
nw = addTransportationLayer(link_layer = roads$osm_lines)
roads$osm_lines
# source: addTransportationLayer in CS_HOME/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R
source(paste0(Sys.getenv('CS_HOME'),"/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R"))
nw = addTransportationLayer(link_layer = roads$osm_lines)
as.character(roads$osm_lines)
nw = addTransportationLayer(link_layer = roads$osm_lines)
# source: addTransportationLayer in CS_HOME/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R
source(paste0(Sys.getenv('CS_HOME'),"/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R"))
nw = addTransportationLayer(link_layer = roads$osm_lines)
warnings()
nw
vertexes = data.frame()
g=empty_graph(0)$fun(0)
stations_layer=NULL
link_layer=roads$osm_lines
#'
#' @name addTransportationLayer
#' @description Construct tarnsportation graph by adding layers successively
#'
#' @param
#'
addTransportationLayer<-function(stations_layer=NULL,
link_layer,
g=empty_graph(0)$fun(0),
speed=1,
snap=100,
e_attr_names=NULL,
reprojection=NULL
){
show(paste0('Adding transportation network : stations = ',stations_layer,' ; links = ',link_layer))
# construct vertex set
vertexes = data.frame()
if(length(V(g))>0){
vertexes = data.frame(id=V(g)$name,x=V(g)$x,y=V(g)$y,station=V(g)$station)
vertexes$id=as.numeric(as.character(vertexes$id))
currentvid = vertexes$id[nrow(vertexes)] + 1
}
if(!is.null(stations_layer)){
if(is.character(stations_layer)){
spath = strsplit(strsplit(stations_layer,'.shp')[[1]][1],'/')[[1]]
stations <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
}else{stations <- stations_layer}
if(!is.null(reprojection)){
stations <- spTransform(stations, reprojection)
}
if(length(V(g))>0){
coords=stations@coords
for(i in 1:length(stations)){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[i,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
# create only if does not exist
#show(min(statdist))
if(statdist[statdist==min(statdist)]>snap){
vertexes=rbind(vertexes,c(id=currentvid,x=coords[i,1],y=coords[i,2],station=TRUE))
currentvid=currentvid+1
}
}
}else{
vertexes=rbind(vertexes,data.frame(id=(nrow(vertexes)+1):(nrow(vertexes)+length(stations)),x=stations@coords[,1],y=stations@coords[,2],station=rep(TRUE,length(stations))))
vertexes$id=as.numeric(as.character(vertexes$id))
}
}
# links
if(is.character(link_layer)){
lpath = strsplit(strsplit(link_layer,'.shp')[[1]][1],'/')[[1]]
links <- readOGR(paste(lpath[1:(length(lpath)-1)],collapse="/"),lpath[length(lpath)])
}else{links <- link_layer}
if(!is.null(reprojection)){
links <- spTransform(links, reprojection)
}
edges = data.frame()
#show(g)
if(length(E(g))>0){
edges = data.frame(from=tail_of(g,E(g))$name,to=head_of(g,E(g))$name,speed=E(g)$speed,length=E(g)$length)
for(attrname in e_attr_names){edges=cbind(edges,get.edge.attribute(g,attrname));colnames(edges)[ncol(edges)]=attrname}
}
currentvid = ifelse(nrow(vertexes)>0,as.numeric(as.character(vertexes$id))[nrow(vertexes)] + 1,1)
edges$from=as.character(edges$from);edges$to=as.character(edges$to)
# convert shitty factor types
for(j in 1:ncol(links@data)){links@data[,j]=as.numeric(as.character(links@data[,j]))}
for(l in 1:length(links)){
#show(l)
#currentAdditionalAttrs=as.numeric(as.character(links@data[l,e_attr_names]))
currentAdditionalAttrs=links@data[l,e_attr_names]
#show(currentAdditionalAttrs)
for(i in 1:length(links@lines[[l]]@Lines)){
coords = links@lines[[l]]@Lines[[i]]@coords
vids = c()
#mincoords=apply(stations@coords,1,function(r){l=links@lines[[l]]@Lines[[i]]@coords;return(min(apply(abs(l-matrix(data=rep(r,nrow(l)),ncol=2,byrow = TRUE)),1,function(r){sqrt(r[1]^2+r[2]^2)})))})
for(k in 1:nrow(coords)){
if(nrow(vertexes)>0){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[k,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
}else{statdist=c(2*snap)}
if(statdist[statdist==min(statdist)]<snap){
vids=append(vids,vertexes$id[statdist==min(statdist)])
#show(paste0('existing : ',vids))
}else{
# else create new vertex
vids=append(vids,currentvid)
#show(paste0('new : ',vids))
vertexes=rbind(vertexes,c(id=currentvid,x=coords[k,1],y=coords[k,2],station=FALSE))
names(vertexes)<-c("id","x","y","station")
currentvid=currentvid+1
}
#show(vertexes)
}
# add edges
for(k in 2:nrow(coords)){
addedge=c(from=vids[k-1],
to=vids[k],
speed=speed,
length=sqrt((coords[k-1,1]-coords[k,1])^2+(coords[k-1,2]-coords[k,2])^2),
currentAdditionalAttrs
)
#show(addedge)
edges=rbind(edges,addedge)
}
}
}
#show(edges)
names(edges)<-c("from","to","speed","length",e_attr_names)
comblist=list(speed="mean",length="sum")
for(attrname in e_attr_names){comblist[[attrname]]="min"}
res = simplify(graph_from_data_frame(edges,directed=FALSE,vertices = vertexes),edge.attr.comb = comblist)
g = induced_subgraph(res,which(degree(res)>0))
if(is.null(stations_layer)){
V(g)$station = rep(TRUE,vcount(g))
}
return(g)
}
speed=1
snap=100
e_attr_names=NULL
reprojection=NULL
if (is.character(stations_layer)&&is.character(link_layer)){
show(paste0('Adding transportation network : stations = ',stations_layer,' ; links = ',link_layer))
}else {show('Adding transportation network layer')}
# construct vertex set
vertexes = data.frame()
if(length(V(g))>0){
vertexes = data.frame(id=V(g)$name,x=V(g)$x,y=V(g)$y,station=V(g)$station)
vertexes$id=as.numeric(as.character(vertexes$id))
currentvid = vertexes$id[nrow(vertexes)] + 1
}
if(!is.null(stations_layer)){
if(is.character(stations_layer)){
spath = strsplit(strsplit(stations_layer,'.shp')[[1]][1],'/')[[1]]
stations <- readOGR(paste(spath[1:(length(spath)-1)],collapse="/"),spath[length(spath)])
}else{stations <- stations_layer}
if(!is.null(reprojection)){
stations <- spTransform(stations, reprojection)
}
if(length(V(g))>0){
coords=stations@coords
for(i in 1:length(stations)){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[i,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
# create only if does not exist
#show(min(statdist))
if(statdist[statdist==min(statdist)]>snap){
vertexes=rbind(vertexes,c(id=currentvid,x=coords[i,1],y=coords[i,2],station=TRUE))
currentvid=currentvid+1
}
}
}else{
vertexes=rbind(vertexes,data.frame(id=(nrow(vertexes)+1):(nrow(vertexes)+length(stations)),x=stations@coords[,1],y=stations@coords[,2],station=rep(TRUE,length(stations))))
vertexes$id=as.numeric(as.character(vertexes$id))
}
}
# links
if(is.character(link_layer)){
lpath = strsplit(strsplit(link_layer,'.shp')[[1]][1],'/')[[1]]
links <- readOGR(paste(lpath[1:(length(lpath)-1)],collapse="/"),lpath[length(lpath)])
}else{links <- link_layer}
if(!is.null(reprojection)){
links <- spTransform(links, reprojection)
}
edges = data.frame()
#show(g)
if(length(E(g))>0){
edges = data.frame(from=tail_of(g,E(g))$name,to=head_of(g,E(g))$name,speed=E(g)$speed,length=E(g)$length)
for(attrname in e_attr_names){edges=cbind(edges,get.edge.attribute(g,attrname));colnames(edges)[ncol(edges)]=attrname}
}
currentvid = ifelse(nrow(vertexes)>0,as.numeric(as.character(vertexes$id))[nrow(vertexes)] + 1,1)
currentvid
edges$from=as.character(edges$from);edges$to=as.character(edges$to)
edges
links@data
# convert shitty factor types
for(j in 1:ncol(links@data)){links@data[,j]=as.numeric(as.character(links@data[,j]))}
warnings()
links@data$maxspeed
for(l in 1:length(links)){
#show(l)
#currentAdditionalAttrs=as.numeric(as.character(links@data[l,e_attr_names]))
currentAdditionalAttrs=links@data[l,e_attr_names]
#show(currentAdditionalAttrs)
for(i in 1:length(links@lines[[l]]@Lines)){
coords = links@lines[[l]]@Lines[[i]]@coords
vids = c()
#mincoords=apply(stations@coords,1,function(r){l=links@lines[[l]]@Lines[[i]]@coords;return(min(apply(abs(l-matrix(data=rep(r,nrow(l)),ncol=2,byrow = TRUE)),1,function(r){sqrt(r[1]^2+r[2]^2)})))})
for(k in 1:nrow(coords)){
if(nrow(vertexes)>0){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[k,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
}else{statdist=c(2*snap)}
if(statdist[statdist==min(statdist)]<snap){
vids=append(vids,vertexes$id[statdist==min(statdist)])
#show(paste0('existing : ',vids))
}else{
# else create new vertex
vids=append(vids,currentvid)
#show(paste0('new : ',vids))
vertexes=rbind(vertexes,c(id=currentvid,x=coords[k,1],y=coords[k,2],station=FALSE))
names(vertexes)<-c("id","x","y","station")
currentvid=currentvid+1
}
#show(vertexes)
}
# add edges
for(k in 2:nrow(coords)){
addedge=c(from=vids[k-1],
to=vids[k],
speed=speed,
length=sqrt((coords[k-1,1]-coords[k,1])^2+(coords[k-1,2]-coords[k,2])^2),
currentAdditionalAttrs
)
#show(addedge)
edges=rbind(edges,addedge)
}
}
}
edges
e_attr_names = c("maxspeed")
edges = data.frame()
edges$from=as.character(edges$from);edges$to=as.character(edges$to)
for(l in 1:length(links)){
#show(l)
#currentAdditionalAttrs=as.numeric(as.character(links@data[l,e_attr_names]))
currentAdditionalAttrs=links@data[l,e_attr_names]
#show(currentAdditionalAttrs)
for(i in 1:length(links@lines[[l]]@Lines)){
coords = links@lines[[l]]@Lines[[i]]@coords
vids = c()
#mincoords=apply(stations@coords,1,function(r){l=links@lines[[l]]@Lines[[i]]@coords;return(min(apply(abs(l-matrix(data=rep(r,nrow(l)),ncol=2,byrow = TRUE)),1,function(r){sqrt(r[1]^2+r[2]^2)})))})
for(k in 1:nrow(coords)){
if(nrow(vertexes)>0){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[k,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
}else{statdist=c(2*snap)}
if(statdist[statdist==min(statdist)]<snap){
vids=append(vids,vertexes$id[statdist==min(statdist)])
#show(paste0('existing : ',vids))
}else{
# else create new vertex
vids=append(vids,currentvid)
#show(paste0('new : ',vids))
vertexes=rbind(vertexes,c(id=currentvid,x=coords[k,1],y=coords[k,2],station=FALSE))
names(vertexes)<-c("id","x","y","station")
currentvid=currentvid+1
}
#show(vertexes)
}
# add edges
for(k in 2:nrow(coords)){
addedge=c(from=vids[k-1],
to=vids[k],
speed=speed,
length=sqrt((coords[k-1,1]-coords[k,1])^2+(coords[k-1,2]-coords[k,2])^2),
currentAdditionalAttrs
)
#show(addedge)
edges=rbind(edges,addedge)
}
}
}
edges
snap = 1e-6
edges = data.frame()
currentvid = ifelse(nrow(vertexes)>0,as.numeric(as.character(vertexes$id))[nrow(vertexes)] + 1,1)
edges$from=as.character(edges$from);edges$to=as.character(edges$to)
for(l in 1:length(links)){
#show(l)
#currentAdditionalAttrs=as.numeric(as.character(links@data[l,e_attr_names]))
currentAdditionalAttrs=links@data[l,e_attr_names]
#show(currentAdditionalAttrs)
for(i in 1:length(links@lines[[l]]@Lines)){
coords = links@lines[[l]]@Lines[[i]]@coords
vids = c()
#mincoords=apply(stations@coords,1,function(r){l=links@lines[[l]]@Lines[[i]]@coords;return(min(apply(abs(l-matrix(data=rep(r,nrow(l)),ncol=2,byrow = TRUE)),1,function(r){sqrt(r[1]^2+r[2]^2)})))})
for(k in 1:nrow(coords)){
if(nrow(vertexes)>0){
statdist = apply(vertexes[,c("x","y")] - matrix(rep(coords[k,],nrow(vertexes)),ncol=2,byrow=TRUE),1,function(r){sqrt(r[1]^2+r[2]^2)})
}else{statdist=c(2*snap)}
if(statdist[statdist==min(statdist)]<snap){
vids=append(vids,vertexes$id[statdist==min(statdist)])
#show(paste0('existing : ',vids))
}else{
# else create new vertex
vids=append(vids,currentvid)
#show(paste0('new : ',vids))
vertexes=rbind(vertexes,c(id=currentvid,x=coords[k,1],y=coords[k,2],station=FALSE))
names(vertexes)<-c("id","x","y","station")
currentvid=currentvid+1
}
#show(vertexes)
}
# add edges
for(k in 2:nrow(coords)){
addedge=c(from=vids[k-1],
to=vids[k],
speed=speed,
length=sqrt((coords[k-1,1]-coords[k,1])^2+(coords[k-1,2]-coords[k,2])^2),
currentAdditionalAttrs
)
#show(addedge)
edges=rbind(edges,addedge)
}
}
}
edges
help(simplify)
comblist=list(speed="mean",length="sum")
for(attrname in e_attr_names){comblist[[attrname]]="min"}
res = simplify(graph_from_data_frame(edges,directed=FALSE,vertices = vertexes),edge.attr.comb = comblist)
g = induced_subgraph(res,which(degree(res)>0))
if(is.null(stations_layer)){
V(g)$station = rep(TRUE,vcount(g))
}
g
g
res = simplify(graph_from_data_frame(edges,directed=FALSE,vertices = vertexes),edge.attr.comb = comblist)
res
vertexes
graph_from_data_frame(edges,directed=FALSE,vertices = vertexes)
comblist
#show(edges)
names(edges)<-c("from","to","speed","length",e_attr_names)
comblist=list(speed="mean",length="sum")
for(attrname in e_attr_names){comblist[[attrname]]="min"}
res = simplify(graph_from_data_frame(edges,directed=FALSE,vertices = vertexes),edge.attr.comb = comblist)
res
g = induced_subgraph(res,which(degree(res)>0))
if(is.null(stations_layer)){
V(g)$station = rep(TRUE,vcount(g))
}
g
# source: addTransportationLayer in CS_HOME/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R
source(paste0(Sys.getenv('CS_HOME'),"/CityNetwork/Models/TransportationNetwork/NetworkAnalysis/network.R"))
nw = addTransportationLayer(link_layer = roads$osm_lines, snap=1e-6)
nw
shortest_paths(nw,from = V(nw)[1])
install.packages('r5r')
citation()
help(facet_grid)
library(ggplot2)
help(facet_grid)
remotes::install_github("mdneuzerling/getsysreqs")
install.packages('remote')
install.packages('remotes')
vignette(remote)
library(remote)
help(remote)
library(remotes)
remotes::install_github("mdneuzerling/getsysreqs")
getsysreqs("devtools")
library(getsysreqs)
get_sysreqs("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("ragg")
install.packages("devtools")
library(devtools)
install.packages('remotes')
library(remotes)
remotes::install_github("sebastien-plutniak/archeofrag")
(help(remotes))
help(remotes)
help("remotes")
library(remotes)
help(remotes)
help(install.packages)
library(osmdata)
library(sf)
# routes principales pour Paris
bb <- getbb('paris fr', format_out = 'polygon')
# exporter en sp (pour utilisation avec des packages non compatibles avec sf)
roads <- opq(bbox = bb, timeout = 200) %>% add_osm_feature(key='highway',value='primary') %>% osmdata_sp()
# transformer les donnees brutes en graphe igraph pour calculer des temps de parcours
#  -> fonctions disponible ici : https://github.com/JusteRaimbault/TransportationNetwork (pas encore déployé en package)
source('https://raw.githubusercontent.com/JusteRaimbault/TransportationNetwork/master/NetworkAnalysis/network.R')
# dans notre cas une seule couche de transport
#  (pour le snapping = aggregation des noeuds, ici les donnees ne sont pas projetees, on aggrege a 100m ~)
g <- addTransportationLayer(link_layer = roads$osm_lines, snap = 0.001)
roads
# transformer les donnees brutes en graphe igraph pour calculer des temps de parcours
#  -> fonctions disponible ici : https://github.com/JusteRaimbault/TransportationNetwork (pas encore déployé en package)
source('https://raw.githubusercontent.com/JusteRaimbault/TransportationNetwork/master/NetworkAnalysis/network.R')
# dans notre cas une seule couche de transport
#  (pour le snapping = aggregation des noeuds, ici les donnees ne sont pas projetees, on aggrege a 100m ~)
g <- addTransportationLayer(link_layer = roads$osm_lines, snap = 0.001)
warnings()
g
summary(E(g)$length)
summary(V(g)$x)
summary(V(g)$y)
# plot d'un plus court chemin aleatoire (vitesse constante = 1 -> a adapter a une vitesse reelle)
path = shortest_paths(g, from = sample.int(vcount(g),1), to = sample.int(vcount(g),1),weights = 1/E(g)$length)
plot(g, vertex.size=5, vertex.label=NA,
vertex.color = ifelse(V(g)%in%path$vpath[[1]],'green', 'black')
)
# plot d'un plus court chemin aleatoire (vitesse constante = 1 -> a adapter a une vitesse reelle)
path = shortest_paths(g, from = sample.int(vcount(g),1), to = sample.int(vcount(g),1),weights = 1/E(g)$length)
plot(g, vertex.size=5, vertex.label=NA,
vertex.color = ifelse(V(g)%in%path$vpath[[1]],'green', 'black')
)
# plot d'un plus court chemin aleatoire (vitesse constante = 1 -> a adapter a une vitesse reelle)
path = shortest_paths(g, from = sample.int(vcount(g),1), to = sample.int(vcount(g),1),weights = 1/E(g)$length)
plot(g, vertex.size=5, vertex.label=NA,
vertex.color = ifelse(V(g)%in%path$vpath[[1]],'green', 'black')
)
# plot d'un plus court chemin aleatoire (vitesse constante = 1 -> a adapter a une vitesse reelle)
path = shortest_paths(g, from = sample.int(vcount(g),1), to = sample.int(vcount(g),1),weights = 1/E(g)$length)
plot(g, vertex.size=5, vertex.label=NA,
vertex.color = ifelse(V(g)%in%path$vpath[[1]],'green', 'black')
)
# plot d'un plus court chemin aleatoire (vitesse constante = 1 -> a adapter a une vitesse reelle)
path = shortest_paths(g, from = sample.int(vcount(g),1), to = sample.int(vcount(g),1),weights = 1/E(g)$length)
plot(g, vertex.size=5, vertex.label=NA,
vertex.color = ifelse(V(g)%in%path$vpath[[1]],'green', 'black')
)
# plot d'un plus court chemin aleatoire (vitesse constante = 1 -> a adapter a une vitesse reelle)
path = shortest_paths(g, from = sample.int(vcount(g),1), to = sample.int(vcount(g),1),weights = 1/E(g)$length)
plot(g, vertex.size=5, vertex.label=NA,
vertex.color = ifelse(V(g)%in%path$vpath[[1]],'green', 'black')
)
# fonctions pour simplifier le graphe
source('https://github.com/JusteRaimbault/TransportationNetwork/raw/master/NetworkSimplification/nwSimplFunctions.R')
install.packages(RMongo)
install.packages("RMongo")
setwd(paste0(Sys.getenv('CS_HOME'),'/UrbanEvolution/Models/InnovationMultiscale/InnovationMultiscale-model/openmole'))
library(dplyr,warn.conflicts = F)
library(readr)
install.packages("readr")
library(readr)
library(ggplot2)
source(paste0(Sys.getenv('CS_HOME'),'/Organisation/Models/Utils/R/plots.R'))
params<-c("macroGravityDecay","macroInnovationDecay","mesoCrossOverProba","mesoMutationProba",
"mesoInteractionProba","mesoToMacroInnovationThreshold","macroToMesoCrossoverMaxUpdate",
"macroToMesoExchangeMaxUpdate","macroToMesoMutationMaxUpdate")
indics<-c("macroDiversity", "macroInnovation", "macroUtility", "mesoDiversity", "mesoFitness",
"deltaDiversity","deltaUtility","gammaDiversity","gammaUtility","psiUtility","psiDiversity")
#resprefix = '20230313_232838_EXPLORATION'
resprefix = '20230509_175143_EXPLORATION'
resdir = paste0(Sys.getenv('CS_HOME'),'/UrbanEvolution/Results/InnovationMultiscale/',resprefix,'/');dir.create(resdir,recursive = T)
res <- read_csv(file=paste0('exploration/',resprefix,'.csv'))
unique(sres$mesoCrossOverProba)
# indicator plots
sres = res %>% group_by(mesoCrossOverProba,macroGravityDecay,macroInnovationDecay,mesoToMacroInnovationThreshold,macroToMesoExchangeMaxUpdate)%>%
summarise(macroDiversity=mean(macroDiversity), macroInnovation=mean(macroInnovation),
macroUtility=mean(macroUtility), mesoDiversity=mean(mesoDiversity), mesoFitness=mean(mesoFitness),
deltaDiversity=mean(deltaDiversity),deltaUtility=mean(deltaUtility),gammaDiversity=mean(gammaDiversity),gammaUtility=mean(gammaUtility),psiUtility=mean(psiUtility),psiDiversity=mean(psiDiversity))
unique(sres$mesoCrossOverProba)
for(mesoCrossOverProba in unique(sres$mesoCrossOverProba)){
for (indic in indics){
ggsave(
ggplot(sres[sres$mesoCrossOverProba==mesoCrossOverProba,],
aes_string(x = "macroGravityDecay", y=indic, color = "macroInnovationDecay", group="macroInnovationDecay" ))+
geom_line()+facet_grid(mesoToMacroInnovationThreshold~macroToMesoExchangeMaxUpdate,scales = 'free')+
scale_colour_continuous(name=expression(d[I]))+xlab(expression(d[G]))+ylab(indic)+stdtheme
,filename = paste0(resdir,indic,'-macroGravityDecay_color-macroInnovationDecay_facet-mesoToMacroInnovationThreshold-macroToMesoExchangeMaxUpdate_mesoCrossOverProba',mesoCrossOverProba,'.png'),width=30,height=20,units='cm'
)
}
}
