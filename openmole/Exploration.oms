val macroGravityDecay = Val[Double]
val macroInnovationDecay = Val[Double]
val mesoCrossOverProba = Val[Double]
val mesoMutationProba = Val[Double]
val mesoInteractionProba = Val[Double]
val mesoToMacroInnovationThreshold = Val[Double]
val macroToMesoCrossoverMaxUpdate = Val[Double]
val macroToMesoMutationMaxUpdate = Val[Double]
val macroToMesoExchangeMaxUpdate = Val[Double]

val id = Val[Int]
val replication = Val[Long]

val macroUtility = Val[Double]
val macroDiversity = Val[Double]
val macroInnovation = Val[Double]
val mesoDiversity = Val[Double]
val mesoFitness = Val[Double]
val psiUtility = Val[Double]
val psiUtilityStd = Val[Double]
val deltaUtility = Val[Double]
val deltaUtilityStd = Val[Double]
val gammaUtility = Val[Double]
val gammaUtilityStd = Val[Double]
val psiDiversity = Val[Double]
val psiDiversityStd = Val[Double]
val deltaDiversity = Val[Double]
val deltaDiversityStd = Val[Double]
val gammaDiversity = Val[Double]
val gammaDiversityStd = Val[Double]


val model = ScalaTask("""
  |import scala.util.Random
  |import innovationmultiscale._
  |import input._
  |
  |implicit val rng: Random = new Random(input.replication)
  |
  |val model = InnovationMultiscale(
  |  seed = rng.nextLong(),
  |  finalTime = 50,
  |  setupSyntheticCities = 10,
  |  setupSyntheticHierarchy = 1.0,
  |  setupSyntheticMaxPop = 10000.0,
  |  setupFirmSizeScaling = 1.0,
  |  setupLargestFirmSize = 100.0,
  |  setupFirmsNumberScaling = 1.0,
  |  setupLargestClusterSize = 20.0,
  |  setupLargestFirmSizeScaling = 1.0,
  |  macroGrowthRate = 0.0,
  |  macroInnovationWeight = 0.01,
  |  macroGravityDecay = macroGravityDecay,
  |  macroInnovationDecay = macroInnovationDecay,
  |  macroEarlyAdoptersRate = 0.2,
  |  macroUtilityStd = 1.0,
  |  macroInitialInnovationUtility = 1.0,
  |  mesoGenomeSize = 10,
  |  mesoTimeSteps = 50,
  |  mesoCrossOverProba = mesoCrossOverProba,
  |  mesoCrossOverShare = 0.5,
  |  mesoMutationProba = mesoMutationProba,
  |  mesoMutationAmplitude = 1.0,
  |  mesoCurrentProductShare = 0.5,
  |  mesoInteractionProba = mesoInteractionProba,
  |  mesoDistanceDecay = 100.0,
  |  mesoToMacroInnovationThreshold = mesoToMacroInnovationThreshold,
  |  macroToMesoCrossoverMaxUpdate = macroToMesoCrossoverMaxUpdate,
  |  macroToMesoMutationMaxUpdate = macroToMesoMutationMaxUpdate,
  |  macroToMesoExchangeMaxUpdate =  macroToMesoExchangeMaxUpdate
  |)
  |val result = model.run
  |
  |val macroUtility = result.averageMacroUtility
  |val macroDiversity = result.averageMacroDiversity
  |val macroInnovation = result.averageMacroInnovation
  |val mesoDiversity = result.averageMesoProductDiversity
  |val mesoFitness = result.averageMesoBestFitness
  |val (psiUtility,psiUtilityStd) = Statistics.psiWithStd(result.mesoTimeSeries,result.macroUtilities)(rng)
  |val (deltaUtility,deltaUtilityStd) = Statistics.deltaWithStd(result.mesoTimeSeries,result.macroUtilities)(rng)
  |val (gammaUtility,gammaUtilityStd) = Statistics.gammaWithStd(result.mesoTimeSeries,result.macroUtilities)(rng)
  |val (psiDiversity,psiDiversityStd) = Statistics.psiWithStd(result.mesoTimeSeries,result.macroDiversities)(rng)
  |val (deltaDiversity,deltaDiversityStd) = Statistics.deltaWithStd(result.mesoTimeSeries,result.macroDiversities)(rng)
  |val (gammaDiversity,gammaDiversityStd) = Statistics.gammaWithStd(result.mesoTimeSeries,result.macroDiversities)(rng)
  """.stripMargin
    ) set (
  plugins += pluginsOf[innovationmultiscale.State],
  (inputs, outputs) += (macroGravityDecay, macroInnovationDecay, mesoCrossOverProba, mesoMutationProba, mesoInteractionProba,
    mesoToMacroInnovationThreshold, macroToMesoCrossoverMaxUpdate, macroToMesoMutationMaxUpdate, macroToMesoExchangeMaxUpdate, 
    replication, id),
  outputs += (macroUtility, macroDiversity, macroInnovation, mesoDiversity,mesoFitness,
  psiUtility,deltaUtility,gammaUtility,psiDiversity,deltaDiversity,gammaDiversity,
  psiUtilityStd,deltaUtilityStd,gammaUtilityStd,psiDiversityStd,deltaDiversityStd,gammaDiversityStd
  )
)

//val purpose = "EXPLORATION"
val purpose = "STOCHASTICITY"
//val purpose = "TEST"

val resfilename = ((new java.text.SimpleDateFormat("yyyyMMdd_HHmmss")).format(new java.util.Date()))+"_"+purpose+".csv"
val indics_hook = CSVHook(workDirectory / "exploration" / resfilename,arrayOnRow=true)

val env = LocalEnvironment(5)
//val env = EGIEnvironment("vo.complex-systems.eu")

DirectSampling(
    //evaluation = (model on env by 1000 hook indics_hook),
    evaluation = (model on env hook indics_hook),
    sampling = (
        LHS(sample = 10,
            factor = Seq(
                macroGravityDecay in (0.1,2.0),
                macroInnovationDecay in (0.1,2.0),
                mesoCrossOverProba in (0.3,0.7),
                mesoMutationProba in (0.001,0.05),
                mesoInteractionProba in (0.00001, 0.0005),
                mesoToMacroInnovationThreshold in (0.5,3.0),
                macroToMesoCrossoverMaxUpdate in (-0.1,0.1),
                macroToMesoMutationMaxUpdate in (-0.005,0.005),
                macroToMesoExchangeMaxUpdate in (-0.00001,0.00001)
                )
            )
          /* (macroGravityDecay in Seq(0.1,0.5,1.1))
          x (macroInnovationDecay in Seq(0.1,0.5,1.1))
          x (mesoCrossOverProba in Seq(0.25,0.5))
          x (mesoMutationProba is 0.01)
          x (mesoInteractionProba in Seq(0.0000001,,0.0001))
          x (mesoToMacroInnovationThreshold in Seq(1.0,2.0))
          x (macroToMesoCrossoverMaxUpdate is 0.0)
          x (macroToMesoMutationMaxUpdate is 0.0)
          x (macroToMesoExchangeMaxUpdate in Seq(-0.00001,0.00001))
          */
     withIndex id ) x (replication in UniformDistribution[Long]() take 50)
)


